{"componentChunkName":"component---gatsby-theme-mdx-deck-src-templates-deck-js","path":"/","matchPath":"/*","result":{"data":{"deck":{"id":"0ff6303b-3b13-56ad-a9c5-d222cb2aa48b","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = vsDark;\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Dive into AST\"), mdx(\"hr\", null), mdx(\"h2\", null, \"no-eval: \\u6B63\\u898F\\u8868\\u73FE\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u6B63\\u898F\\u8868\\u73FE\\u3067 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"eval(?)\"), \" \\u3092\\u4F7F\\u3063\\u3066\\u3044\\u308B\\u306E\\u3092\\u898B\\u3064\\u3051\\u308B\\u30D0\\u30EA\\u30C7\\u30FC\\u30B7\\u30E7\\u30F3\\u3092\\u5B9F\\u88C5\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"eval\"), \"\\u304C\\u3042\\u3063\\u305F\\u3089 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"{ ok: false, error: { text: string, range: [number, number] }[] }\"), \" \\u3092\\u8FD4\\u3059\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"no-eval: 正規表現での実装\\\" file=\\\"examples/regexp-validator/index.js\\\"\",\n    \"title\": \"\\\"no-eval:\",\n    \"正規表現での実装\\\"\": true,\n    \"file\": \"\\\"examples/regexp-validator/index.js\\\"\"\n  }), \"module.exports.noEval = code => {\\n    const pattern = /eval\\\\(.*?\\\\)/g;\\n    const errors = [];\\n    let match = null;\\n    while ((match = pattern.exec(code))) {\\n        errors.push({\\n            text: code.slice(match.index, pattern.lastIndex),\\n            range: [match.index, pattern.lastIndex]\\n        });\\n    }\\n    return {\\n        ok: errors.length === 0,\\n        errors\\n    };\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"2 subtitle=\\\"evalにマッチするパターン\\\"\",\n    \"subtitle\": \"\\\"evalにマッチするパターン\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"5:9 subtitle=\\\"パターンにマッチした部分を見つけたらエラー結果に追加\\\"\",\n    \"5:9\": true,\n    \"subtitle\": \"\\\"パターンにマッチした部分を見つけたらエラー結果に追加\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"11:14 subtitle=\\\"エラー結果があるならok:falseを返す\\\"\",\n    \"11:14\": true,\n    \"subtitle\": \"\\\"エラー結果があるならok:falseを返す\\\"\"\n  }), \"\"))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [vsDark, github],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"実装\\\" file=\\\"examples/regexp-validator/index.js\\\"\",\n    \"title\": \"\\\"実装\\\"\",\n    \"file\": \"\\\"examples/regexp-validator/index.js\\\"\"\n  }), \"module.exports.noEval = code => {\\n    const pattern = /eval\\\\(.*?\\\\)/g;\\n    const errors = [];\\n    let match = null;\\n    while ((match = pattern.exec(code))) {\\n        errors.push({\\n            text: code.slice(match.index, pattern.lastIndex),\\n            range: [match.index, pattern.lastIndex]\\n        });\\n    }\\n    return {\\n        ok: errors.length === 0,\\n        errors\\n    };\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"テスト\\\" file=\\\"examples/regexp-validator/index.test.js\\\"\",\n    \"title\": \"\\\"テスト\\\"\",\n    \"file\": \"\\\"examples/regexp-validator/index.test.js\\\"\"\n  }), \"const assert = require(\\\"assert\\\");\\nconst { noEval } = require(\\\"./index\\\");\\n// \\u4E0A\\u624B\\u304Feval\\u3092\\u5224\\u5B9A\\u3067\\u304D\\u308B\\u30D1\\u30BF\\u30FC\\u30F3\\nconst validationResult = noEval(`\\neval(1+1);\\n`);\\nassert.deepStrictEqual(validationResult, {\\n    ok: false,\\n    errors: [{ text: \\\"eval(1+1)\\\", range: [1, 10] }]\\n});\\n\\n// \\u30B3\\u30E1\\u30F3\\u30C8\\u306Eeval\\u3092\\u8AA4\\u691C\\u77E5\\u3057\\u3066\\u308B\\u30D1\\u30BF\\u30FC\\u30F3\\nconst validationResult2 = noEval(`\\n// eval(1+1); <= THIS IS COMMENT\\n`);\\nassert.deepStrictEqual(validationResult2, {\\n    ok: false,\\n    errors: [{ text: \\\"eval(1+1)\\\", range: [4, 13] }]\\n});\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"実装\\\" file=\\\"examples/regexp-validator/index.js\\\"\",\n    \"title\": \"\\\"実装\\\"\",\n    \"file\": \"\\\"examples/regexp-validator/index.js\\\"\"\n  }), \"module.exports.noEval = code => {\\n    const pattern = /eval\\\\(.*?\\\\)/g;\\n    const errors = [];\\n    let match = null;\\n    while ((match = pattern.exec(code))) {\\n        errors.push({\\n            text: code.slice(match.index, pattern.lastIndex),\\n            range: [match.index, pattern.lastIndex]\\n        });\\n    }\\n    return {\\n        ok: errors.length === 0,\\n        errors\\n    };\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"4:10 title=\\\"テスト\\\" subtitle=\\\"上手く判定できてるパターン\\\"\",\n    \"4:10\": true,\n    \"title\": \"\\\"テスト\\\"\",\n    \"subtitle\": \"\\\"上手く判定できてるパターン\\\"\"\n  }), \"\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"実装\\\" file=\\\"examples/regexp-validator/index.js\\\"\",\n    \"title\": \"\\\"実装\\\"\",\n    \"file\": \"\\\"examples/regexp-validator/index.js\\\"\"\n  }), \"module.exports.noEval = code => {\\n    const pattern = /eval\\\\(.*?\\\\)/g;\\n    const errors = [];\\n    let match = null;\\n    while ((match = pattern.exec(code))) {\\n        errors.push({\\n            text: code.slice(match.index, pattern.lastIndex),\\n            range: [match.index, pattern.lastIndex]\\n        });\\n    }\\n    return {\\n        ok: errors.length === 0,\\n        errors\\n    };\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"13:19 title=\\\"テスト\\\" subtitle=\\\"誤検知しているパターン\\\"\",\n    \"13:19\": true,\n    \"title\": \"\\\"テスト\\\"\",\n    \"subtitle\": \"\\\"誤検知しているパターン\\\"\"\n  }), \"\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"2 title=\\\"実装\\\" subtitle=\\\"正規表現だけではコメント内かは判断できない\\\"  file=\\\"examples/regexp-validator/index.js\\\"\",\n    \"title\": \"\\\"実装\\\"\",\n    \"subtitle\": \"\\\"正規表現だけではコメント内かは判断できない\\\"\",\n    \"\": true,\n    \"file\": \"\\\"examples/regexp-validator/index.js\\\"\"\n  }), \"module.exports.noEval = code => {\\n    const pattern = /eval\\\\(.*?\\\\)/g;\\n    const errors = [];\\n    let match = null;\\n    while ((match = pattern.exec(code))) {\\n        errors.push({\\n            text: code.slice(match.index, pattern.lastIndex),\\n            range: [match.index, pattern.lastIndex]\\n        });\\n    }\\n    return {\\n        ok: errors.length === 0,\\n        errors\\n    };\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"13:19 title=\\\"テスト\\\" subtitle=\\\"誤検知しているパターン\\\"\",\n    \"13:19\": true,\n    \"title\": \"\\\"テスト\\\"\",\n    \"subtitle\": \"\\\"誤検知しているパターン\\\"\"\n  }), \"\")))), mdx(\"hr\", null), mdx(\"h2\", null, \"no-eval: \\u6B63\\u898F\\u8868\\u73FE\\u306E\\u554F\\u984C\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u6B63\\u898F\\u8868\\u73FE\\u306F\\u7C21\\u5358\\u3060\\u304C\\u554F\\u984C\\u30922\\u3064\\u306B\\u5897\\u3084\\u3059\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u30B3\\u30E1\\u30F3\\u30C8\\u4E2D\\u3084\\u30B9\\u30DA\\u30FC\\u30B9\\u306E\\u6709\\u7121\\u306B\\u306F\\u5BFE\\u5FDC\\u3057\\u306B\\u304F\\u3044\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u6B63\\u898F\\u8868\\u73FE\\u3067\\u30BD\\u30FC\\u30B9\\u30B3\\u30FC\\u30C9\\u306E\\u3088\\u3046\\u306A\\u67D4\\u8EDF\\u306A\\u3082\\u306E\\u306F\\u30DE\\u30C3\\u30C1\\u3059\\u308B\\u306E\\u304C\\u56F0\\u96E3\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u30D6\\u30E9\\u30C3\\u30AF\\u30EA\\u30B9\\u30C8\\u306E\\u5B9F\\u88C5\\u306F\\u629C\\u3051\\u304C\\u591A\\u304F\\u306A\\u308A\\u3084\\u3059\\u3044\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u30DB\\u30EF\\u30A4\\u30C8\\u30EA\\u30B9\\u30C8\\u306E\\u5B9F\\u88C5\\u306F\\u6B63\\u898F\\u8868\\u73FE\\u304C\\u3084\\u308A\\u3084\\u3059\\u3044\")), mdx(\"hr\", null), mdx(\"h2\", null, \"no-eval: AST\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"AST\\u3092\\u4F7F\\u3063\\u3066\\u540C\\u3058no-eval\\u3092\\u5B9F\\u88C5\\u3059\\u308B\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u30D1\\u30FC\\u30B5\\u306B\\u306F\", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/acornjs/acorn\"\n  }), \"acorn\"), \"\\u3001Traversal\\u306B\\u306F\", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/Rich-Harris/estree-walker\"\n  }), \"estree-walker\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    title: \"no-eval: AST\\u3067\\u306E\\u5B9F\\u88C5\",\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"no-eval: ASTでの実装\\\" file=\\\"examples/ast-validator/index.js\\\"\",\n    \"title\": \"\\\"no-eval:\",\n    \"ASTでの実装\\\"\": true,\n    \"file\": \"\\\"examples/ast-validator/index.js\\\"\"\n  }), \"const { parse } = require(\\\"acorn\\\");\\nconst { walk } = require(\\\"estree-walker\\\");\\n\\nmodule.exports.validate = function (code) {\\n    const AST = parse(code, { range: true });\\n    const errors = [];\\n    walk(AST, {\\n        enter(node) {\\n            const isEval =\\n                node.type === \\\"CallExpression\\\" &&\\n                node.callee &&\\n                node.callee.type === \\\"Identifier\\\" &&\\n                node.callee.name === \\\"eval\\\";\\n            if (isEval) {\\n                errors.push({\\n                    range: [node.start, node.end],\\n                    text: code.slice(node.start, node.end)\\n                });\\n            }\\n        }\\n    });\\n    return {\\n        ok: errors.length === 0,\\n        errors\\n    };\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"5\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"5 subtitle=\\\"コードをASTにパースする\\\"\",\n    \"subtitle\": \"\\\"コードをASTにパースする\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"7:21 subtitle=\\\"ASTをトラバースし、各Nodeごとに判定処理\\\"\",\n    \"7:21\": true,\n    \"subtitle\": \"\\\"ASTをトラバースし、各Nodeごとに判定処理\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"9:14 subtitle=\\\"Nodeがeval呼び出しかを判定\\\"\",\n    \"9:14\": true,\n    \"subtitle\": \"\\\"Nodeがeval呼び出しかを判定\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"9:13 subtitle=\\\"isEval: 関数呼び出しで名前がevalかを判定\\\"\",\n    \"9:13\": true,\n    \"subtitle\": \"\\\"isEval:\",\n    \"関数呼び出しで名前がevalかを判定\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"13:19 subtitle=\\\"evalだったらエラー結果に追加\\\"\",\n    \"13:19\": true,\n    \"subtitle\": \"\\\"evalだったらエラー結果に追加\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"22:25 subtitle=\\\"エラーがあったらok:falseを返す\\\"\",\n    \"22:25\": true,\n    \"subtitle\": \"\\\"エラーがあったらok:falseを返す\\\"\"\n  }), \"\"))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [vsDark, github],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"実装\\\" file=\\\"examples/ast-validator/index.js\\\"\",\n    \"title\": \"\\\"実装\\\"\",\n    \"file\": \"\\\"examples/ast-validator/index.js\\\"\"\n  }), \"const { parse } = require(\\\"acorn\\\");\\nconst { walk } = require(\\\"estree-walker\\\");\\n\\nmodule.exports.validate = function (code) {\\n    const AST = parse(code, { range: true });\\n    const errors = [];\\n    walk(AST, {\\n        enter(node) {\\n            const isEval =\\n                node.type === \\\"CallExpression\\\" &&\\n                node.callee &&\\n                node.callee.type === \\\"Identifier\\\" &&\\n                node.callee.name === \\\"eval\\\";\\n            if (isEval) {\\n                errors.push({\\n                    range: [node.start, node.end],\\n                    text: code.slice(node.start, node.end)\\n                });\\n            }\\n        }\\n    });\\n    return {\\n        ok: errors.length === 0,\\n        errors\\n    };\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"テスト\\\" file=\\\"examples/ast-validator//index.test.js\\\"\",\n    \"title\": \"\\\"テスト\\\"\",\n    \"file\": \"\\\"examples/ast-validator//index.test.js\\\"\"\n  }), \"const assert = require(\\\"assert\\\");\\nconst { validate } = require(\\\"./index\\\");\\n// eval\\u547C\\u3073\\u51FA\\u3057\\u3092\\u5224\\u5B9A\\u3067\\u304D\\u3066\\u308B\\nconst validationResult = validate(`\\neval(1+1);\\n`);\\nassert.deepStrictEqual(validationResult, {\\n    ok: false,\\n    errors: [{ text: \\\"eval(1+1)\\\", range: [1, 10] }]\\n});\\n\\n// \\u30B3\\u30E1\\u30F3\\u30C8\\u306F\\u30B3\\u30E1\\u30F3\\u30C8\\u3068\\u3057\\u3066\\u8A8D\\u8B58\\u3059\\u308B\\nconst validationResult2 = validate(`\\n// eval(1+1);\\n`);\\nassert.deepStrictEqual(validationResult2, {\\n    ok: true,\\n    errors: []\\n});\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"実装\\\" file=\\\"examples/ast-validator/index.js\\\"\",\n    \"title\": \"\\\"実装\\\"\",\n    \"file\": \"\\\"examples/ast-validator/index.js\\\"\"\n  }), \"const { parse } = require(\\\"acorn\\\");\\nconst { walk } = require(\\\"estree-walker\\\");\\n\\nmodule.exports.validate = function (code) {\\n    const AST = parse(code, { range: true });\\n    const errors = [];\\n    walk(AST, {\\n        enter(node) {\\n            const isEval =\\n                node.type === \\\"CallExpression\\\" &&\\n                node.callee &&\\n                node.callee.type === \\\"Identifier\\\" &&\\n                node.callee.name === \\\"eval\\\";\\n            if (isEval) {\\n                errors.push({\\n                    range: [node.start, node.end],\\n                    text: code.slice(node.start, node.end)\\n                });\\n            }\\n        }\\n    });\\n    return {\\n        ok: errors.length === 0,\\n        errors\\n    };\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"3:12 title=\\\"テスト\\\" subtitle=\\\"evalを判定できてる\\\" file=\\\"examples/ast-validator/index.test.js\\\"\",\n    \"3:12\": true,\n    \"title\": \"\\\"テスト\\\"\",\n    \"subtitle\": \"\\\"evalを判定できてる\\\"\",\n    \"file\": \"\\\"examples/ast-validator/index.test.js\\\"\"\n  }), \"const assert = require(\\\"assert\\\");\\nconst { validate } = require(\\\"./index\\\");\\n// eval\\u547C\\u3073\\u51FA\\u3057\\u3092\\u5224\\u5B9A\\u3067\\u304D\\u3066\\u308B\\nconst validationResult = validate(`\\neval(1+1);\\n`);\\nassert.deepStrictEqual(validationResult, {\\n    ok: false,\\n    errors: [{ text: \\\"eval(1+1)\\\", range: [1, 10] }]\\n});\\n\\n// \\u30B3\\u30E1\\u30F3\\u30C8\\u306F\\u30B3\\u30E1\\u30F3\\u30C8\\u3068\\u3057\\u3066\\u8A8D\\u8B58\\u3059\\u308B\\nconst validationResult2 = validate(`\\n// eval(1+1);\\n`);\\nassert.deepStrictEqual(validationResult2, {\\n    ok: true,\\n    errors: []\\n});\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"実装\\\" file=\\\"examples/ast-validator/index.js\\\"\",\n    \"title\": \"\\\"実装\\\"\",\n    \"file\": \"\\\"examples/ast-validator/index.js\\\"\"\n  }), \"const { parse } = require(\\\"acorn\\\");\\nconst { walk } = require(\\\"estree-walker\\\");\\n\\nmodule.exports.validate = function (code) {\\n    const AST = parse(code, { range: true });\\n    const errors = [];\\n    walk(AST, {\\n        enter(node) {\\n            const isEval =\\n                node.type === \\\"CallExpression\\\" &&\\n                node.callee &&\\n                node.callee.type === \\\"Identifier\\\" &&\\n                node.callee.name === \\\"eval\\\";\\n            if (isEval) {\\n                errors.push({\\n                    range: [node.start, node.end],\\n                    text: code.slice(node.start, node.end)\\n                });\\n            }\\n        }\\n    });\\n    return {\\n        ok: errors.length === 0,\\n        errors\\n    };\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"13:20 title=\\\"テスト\\\" subtitle=\\\"コメントを誤検知しない\\\" file=\\\"examples/ast-validator/index.test.js\\\"\",\n    \"13:20\": true,\n    \"title\": \"\\\"テスト\\\"\",\n    \"subtitle\": \"\\\"コメントを誤検知しない\\\"\",\n    \"file\": \"\\\"examples/ast-validator/index.test.js\\\"\"\n  }), \"const assert = require(\\\"assert\\\");\\nconst { validate } = require(\\\"./index\\\");\\n// eval\\u547C\\u3073\\u51FA\\u3057\\u3092\\u5224\\u5B9A\\u3067\\u304D\\u3066\\u308B\\nconst validationResult = validate(`\\neval(1+1);\\n`);\\nassert.deepStrictEqual(validationResult, {\\n    ok: false,\\n    errors: [{ text: \\\"eval(1+1)\\\", range: [1, 10] }]\\n});\\n\\n// \\u30B3\\u30E1\\u30F3\\u30C8\\u306F\\u30B3\\u30E1\\u30F3\\u30C8\\u3068\\u3057\\u3066\\u8A8D\\u8B58\\u3059\\u308B\\nconst validationResult2 = validate(`\\n// eval(1+1);\\n`);\\nassert.deepStrictEqual(validationResult2, {\\n    ok: true,\\n    errors: []\\n});\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"8:20 title=\\\"実装\\\" subtitle=\\\"CallExpressionかを判定するため\\\" file=\\\"examples/ast-validator/index.js\\\"\",\n    \"8:20\": true,\n    \"title\": \"\\\"実装\\\"\",\n    \"subtitle\": \"\\\"CallExpressionかを判定するため\\\"\",\n    \"file\": \"\\\"examples/ast-validator/index.js\\\"\"\n  }), \"const { parse } = require(\\\"acorn\\\");\\nconst { walk } = require(\\\"estree-walker\\\");\\n\\nmodule.exports.validate = function (code) {\\n    const AST = parse(code, { range: true });\\n    const errors = [];\\n    walk(AST, {\\n        enter(node) {\\n            const isEval =\\n                node.type === \\\"CallExpression\\\" &&\\n                node.callee &&\\n                node.callee.type === \\\"Identifier\\\" &&\\n                node.callee.name === \\\"eval\\\";\\n            if (isEval) {\\n                errors.push({\\n                    range: [node.start, node.end],\\n                    text: code.slice(node.start, node.end)\\n                });\\n            }\\n        }\\n    });\\n    return {\\n        ok: errors.length === 0,\\n        errors\\n    };\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"13:20 title=\\\"テスト\\\" subtitle=\\\"コメントは誤検知しない\\\" file=\\\"examples/ast-validator/index.test.js\\\"\",\n    \"13:20\": true,\n    \"title\": \"\\\"テスト\\\"\",\n    \"subtitle\": \"\\\"コメントは誤検知しない\\\"\",\n    \"file\": \"\\\"examples/ast-validator/index.test.js\\\"\"\n  }), \"const assert = require(\\\"assert\\\");\\nconst { validate } = require(\\\"./index\\\");\\n// eval\\u547C\\u3073\\u51FA\\u3057\\u3092\\u5224\\u5B9A\\u3067\\u304D\\u3066\\u308B\\nconst validationResult = validate(`\\neval(1+1);\\n`);\\nassert.deepStrictEqual(validationResult, {\\n    ok: false,\\n    errors: [{ text: \\\"eval(1+1)\\\", range: [1, 10] }]\\n});\\n\\n// \\u30B3\\u30E1\\u30F3\\u30C8\\u306F\\u30B3\\u30E1\\u30F3\\u30C8\\u3068\\u3057\\u3066\\u8A8D\\u8B58\\u3059\\u308B\\nconst validationResult2 = validate(`\\n// eval(1+1);\\n`);\\nassert.deepStrictEqual(validationResult2, {\\n    ok: true,\\n    errors: []\\n});\\n\")))), mdx(\"hr\", null), mdx(\"h2\", null, \"no-eval: AST\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u6B63\\u898F\\u8868\\u73FE\\u3088\\u308A\\u304D\\u3063\\u3061\\u308A\\u3068\\u5BFE\\u5FDC\\u3067\\u304D\\u308B(\\u610F\\u56F3\\u3057\\u306A\\u3044\\u898B\\u9003\\u3057\\u306F\\u6E1B\\u308B)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u30C4\\u30FC\\u30EB\\u3084\\u30E9\\u30A4\\u30D6\\u30E9\\u30EA\\u306E\\u4E00\\u90E8\\u3068\\u3057\\u3066\\u51E6\\u7406\\u3092\\u7D44\\u307F\\u8FBC\\u307F\\u3084\\u3059\\u3044\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u958B\\u767A\\u74B0\\u5883\\u306E\\u30C4\\u30FC\\u30EB\\u30C1\\u30A7\\u30A4\\u30F3\\u3068\\u3057\\u3066\\u7D44\\u307F\\u8FBC\\u3080\\u306A\\u3089ESLint\\u3084Babel\\u306A\\u3069\\u306E\\u30A8\\u30B3\\u30B7\\u30B9\\u30C6\\u30E0\\u306B\\u4E57\\u305B\\u308B\")), mdx(\"hr\", null), mdx(\"h2\", null, \"no-eval: ESLint\"), mdx(\"hr\", null), mdx(\"h2\", null, \"no-eval: ESLint\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ESLint\\u306E\\u30EB\\u30FC\\u30EB\\u3068\\u3057\\u3066no-eval\\u3092\\u5B9F\\u88C5\\u3057\\u3066\\u307F\\u308B\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://eslint.org/docs/rules/no-eval\"\n  }), \"\\u516C\\u5F0F\\u7248\\u3082\\u3042\\u308B\"), \"\\u3051\\u3069\\u4ECA\\u56DE\\u306F\\u30B5\\u30F3\\u30D7\\u30EB\\u3068\\u3057\\u3066\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ESLint\\u306F\", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/eslint/espree\"\n  }), \"Espree\"), \"\\u3092\\u30D1\\u30FC\\u30B5\\u3068\\u3057\\u3066\\u4F7F\\u3046\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/acornjs/acorn\"\n  }), \"Acorn\"), \"\\u30D9\\u30FC\\u30B9\\u3060\\u3051\\u3069\\u3001AST\\u304C\", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/estree/estree\"\n  }), \"ESTree\"), \"\\u4E92\\u63DB\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u30C8\\u30E9\\u30D0\\u30FC\\u30B9\\u306FESLint\\u5074\\u3067\\u3084\\u3063\\u3066\\u304F\\u308C\\u308B\\u306E\\u3067Visitor\\u3092\\u66F8\\u3044\\u3066\\u3044\\u304F\\u3060\\u3051\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    title: \"no-eval: ESLint\\u3067\\u306E\\u5B9F\\u88C5\",\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"no-eval: ESLint\\\" file=\\\"examples/eslint-plugins-no-eval/rules/no-eval.js\\\"\",\n    \"title\": \"\\\"no-eval:\",\n    \"ESLint\\\"\": true,\n    \"file\": \"\\\"examples/eslint-plugins-no-eval/rules/no-eval.js\\\"\"\n  }), \"module.exports = {\\n    create: context => {\\n        return {\\n            \\\"CallExpression > Identifier[name=eval]\\\"(node) {\\n                context.report({\\n                    message: \\\"Don't use eval\\\",\\n                    node\\n                });\\n            }\\n        };\\n    }\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"4\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"4 subtitle=\\\"ESQueryでevalにマッチ\\\"\",\n    \"subtitle\": \"\\\"ESQueryでevalにマッチ\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"4:9 subtitle=\\\"evalのnodeをreportする\\\"\",\n    \"4:9\": true,\n    \"subtitle\": \"\\\"evalのnodeをreportする\\\"\"\n  }), \"\"))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [vsDark, github],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"実装\\\" file=\\\"examples/eslint-plugins-no-eval/rules/no-eval.js\\\"\",\n    \"title\": \"\\\"実装\\\"\",\n    \"file\": \"\\\"examples/eslint-plugins-no-eval/rules/no-eval.js\\\"\"\n  }), \"module.exports = {\\n    create: context => {\\n        return {\\n            \\\"CallExpression > Identifier[name=eval]\\\"(node) {\\n                context.report({\\n                    message: \\\"Don't use eval\\\",\\n                    node\\n                });\\n            }\\n        };\\n    }\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"テスト\\\" file=\\\"examples/eslint-plugins-no-eval/rules/no-eval.test.js\\\"\",\n    \"title\": \"\\\"テスト\\\"\",\n    \"file\": \"\\\"examples/eslint-plugins-no-eval/rules/no-eval.test.js\\\"\"\n  }), \"const { RuleTester } = require(\\\"eslint\\\");\\nconst rule = require(\\\"./no-eval\\\");\\n\\nconst tester = new RuleTester();\\ntester.run(\\\"no-eval\\\", rule, {\\n    valid: [\\n        `new Function(\\\"return 1+1;\\\")`,\\n        `// eval(\\\"1+1\\\")`\\n    ],\\n    invalid: [\\n        {\\n            code: `eval(1+1)`,\\n            errors: [{ message: \\\"Don't use eval\\\" }]\\n        }\\n    ]\\n});\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"実装\\\" file=\\\"examples/eslint-plugins-no-eval/rules/no-eval.js\\\"\",\n    \"title\": \"\\\"実装\\\"\",\n    \"file\": \"\\\"examples/eslint-plugins-no-eval/rules/no-eval.js\\\"\"\n  }), \"module.exports = {\\n    create: context => {\\n        return {\\n            \\\"CallExpression > Identifier[name=eval]\\\"(node) {\\n                context.report({\\n                    message: \\\"Don't use eval\\\",\\n                    node\\n                });\\n            }\\n        };\\n    }\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"1 title=\\\"テスト\\\" subtitle=\\\"RuleTesterを読み込む\\\" file=\\\"examples/eslint-plugins-no-eval/rules/no-eval.test.js\\\"\",\n    \"title\": \"\\\"テスト\\\"\",\n    \"subtitle\": \"\\\"RuleTesterを読み込む\\\"\",\n    \"file\": \"\\\"examples/eslint-plugins-no-eval/rules/no-eval.test.js\\\"\"\n  }), \"const { RuleTester } = require(\\\"eslint\\\");\\nconst rule = require(\\\"./no-eval\\\");\\n\\nconst tester = new RuleTester();\\ntester.run(\\\"no-eval\\\", rule, {\\n    valid: [\\n        `new Function(\\\"return 1+1;\\\")`,\\n        `// eval(\\\"1+1\\\")`\\n    ],\\n    invalid: [\\n        {\\n            code: `eval(1+1)`,\\n            errors: [{ message: \\\"Don't use eval\\\" }]\\n        }\\n    ]\\n});\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"実装\\\" file=\\\"examples/eslint-plugins-no-eval/rules/no-eval.js\\\"\",\n    \"title\": \"\\\"実装\\\"\",\n    \"file\": \"\\\"examples/eslint-plugins-no-eval/rules/no-eval.js\\\"\"\n  }), \"module.exports = {\\n    create: context => {\\n        return {\\n            \\\"CallExpression > Identifier[name=eval]\\\"(node) {\\n                context.report({\\n                    message: \\\"Don't use eval\\\",\\n                    node\\n                });\\n            }\\n        };\\n    }\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"4:16 title=\\\"テスト\\\" subtitle=\\\"テストケースを書く\\\" file=\\\"examples/eslint-plugins-no-eval/rules/no-eval.test.js\\\"\",\n    \"4:16\": true,\n    \"title\": \"\\\"テスト\\\"\",\n    \"subtitle\": \"\\\"テストケースを書く\\\"\",\n    \"file\": \"\\\"examples/eslint-plugins-no-eval/rules/no-eval.test.js\\\"\"\n  }), \"const { RuleTester } = require(\\\"eslint\\\");\\nconst rule = require(\\\"./no-eval\\\");\\n\\nconst tester = new RuleTester();\\ntester.run(\\\"no-eval\\\", rule, {\\n    valid: [\\n        `new Function(\\\"return 1+1;\\\")`,\\n        `// eval(\\\"1+1\\\")`\\n    ],\\n    invalid: [\\n        {\\n            code: `eval(1+1)`,\\n            errors: [{ message: \\\"Don't use eval\\\" }]\\n        }\\n    ]\\n});\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"実装\\\" file=\\\"examples/eslint-plugins-no-eval/rules/no-eval.js\\\"\",\n    \"title\": \"\\\"実装\\\"\",\n    \"file\": \"\\\"examples/eslint-plugins-no-eval/rules/no-eval.js\\\"\"\n  }), \"module.exports = {\\n    create: context => {\\n        return {\\n            \\\"CallExpression > Identifier[name=eval]\\\"(node) {\\n                context.report({\\n                    message: \\\"Don't use eval\\\",\\n                    node\\n                });\\n            }\\n        };\\n    }\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"6:9 title=\\\"テスト\\\" subtitle=\\\"valid:エラーじゃないパターン\\\" file=\\\"examples/eslint-plugins-no-eval/rules/no-eval.test.js\\\"\",\n    \"6:9\": true,\n    \"title\": \"\\\"テスト\\\"\",\n    \"subtitle\": \"\\\"valid:エラーじゃないパターン\\\"\",\n    \"file\": \"\\\"examples/eslint-plugins-no-eval/rules/no-eval.test.js\\\"\"\n  }), \"const { RuleTester } = require(\\\"eslint\\\");\\nconst rule = require(\\\"./no-eval\\\");\\n\\nconst tester = new RuleTester();\\ntester.run(\\\"no-eval\\\", rule, {\\n    valid: [\\n        `new Function(\\\"return 1+1;\\\")`,\\n        `// eval(\\\"1+1\\\")`\\n    ],\\n    invalid: [\\n        {\\n            code: `eval(1+1)`,\\n            errors: [{ message: \\\"Don't use eval\\\" }]\\n        }\\n    ]\\n});\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"実装\\\" file=\\\"examples/eslint-plugins-no-eval/rules/no-eval.js\\\"\",\n    \"title\": \"\\\"実装\\\"\",\n    \"file\": \"\\\"examples/eslint-plugins-no-eval/rules/no-eval.js\\\"\"\n  }), \"module.exports = {\\n    create: context => {\\n        return {\\n            \\\"CallExpression > Identifier[name=eval]\\\"(node) {\\n                context.report({\\n                    message: \\\"Don't use eval\\\",\\n                    node\\n                });\\n            }\\n        };\\n    }\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"10:15 title=\\\"テスト\\\" subtitle=\\\"invalid:エラーとなるパターン\\\" file=\\\"examples/eslint-plugins-no-eval/rules/no-eval.test.js\\\"\",\n    \"10:15\": true,\n    \"title\": \"\\\"テスト\\\"\",\n    \"subtitle\": \"\\\"invalid:エラーとなるパターン\\\"\",\n    \"file\": \"\\\"examples/eslint-plugins-no-eval/rules/no-eval.test.js\\\"\"\n  }), \"const { RuleTester } = require(\\\"eslint\\\");\\nconst rule = require(\\\"./no-eval\\\");\\n\\nconst tester = new RuleTester();\\ntester.run(\\\"no-eval\\\", rule, {\\n    valid: [\\n        `new Function(\\\"return 1+1;\\\")`,\\n        `// eval(\\\"1+1\\\")`\\n    ],\\n    invalid: [\\n        {\\n            code: `eval(1+1)`,\\n            errors: [{ message: \\\"Don't use eval\\\" }]\\n        }\\n    ]\\n});\\n\")))), mdx(\"hr\", null), mdx(\"h2\", null, \"no-eval: ESLint\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ESLint\\u306E\\u30EB\\u30FC\\u30EB\\u306F\\u30ED\\u30B8\\u30C3\\u30AF\\u90E8\\u5206\\u306E\\u307F\\u66F8\\u304F\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u30D1\\u30FC\\u30B9\\u3084\\u30C8\\u30E9\\u30D0\\u30FC\\u30B9\\u306FESLint\\u5074\\u3067\\u3084\\u3063\\u3066\\u304F\\u308C\\u308B\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u30D7\\u30E9\\u30B0\\u30A4\\u30F3\\u306E\\u4ED5\\u7D44\\u307F: \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://efcl.info/2016/06/06/javascript-plugin-architecture/\"\n  }), \"JavaScript Plugin Architecture\\u3068\\u3044\\u3046\\u30D7\\u30E9\\u30B0\\u30A4\\u30F3\\u8A2D\\u8A08\\u306B\\u3064\\u3044\\u3066\\u5B66\\u3076\\u7121\\u6599\\u306E\\u96FB\\u5B50\\u66F8\\u7C4D\\u3092\\u66F8\\u3044\\u305F\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/estools/esquery\"\n  }), \"ESQuery\"), \"(CSS Query Selector\\u306EAST\\u7248)\\u3084\", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://eslint.org/docs/developer-guide/working-with-rules\"\n  }), \"\\u4FBF\\u5229\\u30E1\\u30BD\\u30C3\\u30C9\"), \"\\u304C\\u7528\\u610F\\u3055\\u308C\\u3066\\u3044\\u308B\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u30A8\\u30C7\\u30A3\\u30BF\\u3084\\u30C6\\u30B9\\u30C8\\u306A\\u3069\\u306E\\u30C4\\u30FC\\u30EB\\u30C1\\u30A7\\u30A4\\u30F3\\u306B\\u7D44\\u307F\\u8FBC\\u307F\\u305F\\u3044\\u3068\\u304D\\u306FESLint\\u306E\\u30EB\\u30FC\\u30EB\\u3068\\u3057\\u3066\\u66F8\\u304F\\u3068\\u4FBF\\u5229\")), mdx(\"hr\", null), mdx(\"h2\", null, \"\\u985E\\u4F3C\\u3059\\u308BAST Lint\\u30C4\\u30FC\\u30EB\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u4F3C\\u305F\\u4ED5\\u7D44\\u307F\\u306ELint\\u30C4\\u30FC\\u30EB\\u304C\\u8272\\u3005\\u306A\\u8A00\\u8A9E\\u5411\\u3051\\u306B\\u3042\\u308B\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"CSS: \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://stylelint.io/\"\n  }), \"stylelint\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u81EA\\u7136\\u8A00\\u8A9E: \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://textlint.github.io/\"\n  }), \"textlint\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u4E00\\u5EA6\\u4ED5\\u7D44\\u307F\\u3092\\u899A\\u3048\\u308C\\u3070\\u3001\\u3044\\u308D\\u3093\\u306A\\u30C4\\u30FC\\u30EB\\u306E\\u30EB\\u30FC\\u30EB\\u304C\\u4F5C\\u308A\\u3084\\u3059\\u304F\\u306A\\u308B\")), mdx(\"hr\", null), mdx(\"h1\", null, \"Transform\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Transform\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lint\\u306FNode\\u3092\\u30C1\\u30A7\\u30C3\\u30AF\\u3057\\u3066\\u5831\\u544A\\u3059\\u308B\\u3060\\u3051\\u3060\\u3063\\u305F\\u306E\\u3067\\u7C21\\u5358\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u30B3\\u30FC\\u30C9\\u3092AST\\u306B\\u30D1\\u30FC\\u30B9\\u3057\\u3066\\u3001AST\\u3092\\u30C1\\u30A7\\u30C3\\u30AF\\u3059\\u308B\\u3060\\u3051\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u30B3\\u30FC\\u30C9\\u3092\\u5909\\u63DB\\u3057\\u3088\\u3046\\u3068\\u3059\\u308B\\u3068\\u3001\\u624B\\u66F8\\u304D\\u306F\\u7D50\\u69CB\\u96E3\\u3057\\u3044\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u30B3\\u30FC\\u30C9\\u3092AST\\u306B\\u30D1\\u30FC\\u30B9\\u3057\\u3066\\u3001AST\\u3092\\u5909\\u63DB\\u3057\\u3066\\u3001AST\\u3092\\u30B3\\u30FC\\u30C9\\u306B\\u623B\\u3059\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"3\\u30B9\\u30C6\\u30C3\\u30D7\\u306B\\u306A\\u308B\")))), mdx(\"hr\", null), mdx(\"h2\", null, \"Transform: Babel\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Babel\\u306FJavaScript AST\\u306E\\u5909\\u63DB\\u30D7\\u30E9\\u30C3\\u30C8\\u30D5\\u30A9\\u30FC\\u30E0\\u3068\\u3057\\u3066\\u4F7F\\u3048\\u308B\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Babel\\u5909\\u63DB\\u51E6\\u7406\\u3092\\u30D7\\u30E9\\u30B0\\u30A4\\u30F3\\u3068\\u3057\\u3066\\u5B9F\\u88C5\\u3067\\u304D\\u308B\")), mdx(\"hr\", null), mdx(\"h1\", null, \"no-console: Babel\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u76EE\\u7684: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"console.log\"), \"\\u3092production\\u30D3\\u30EB\\u30C9\\u304B\\u3089\\u53D6\\u308A\\u9664\\u304D\\u305F\\u3044\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"console.log\"), \"\\u3092\\u53D6\\u308A\\u9664\\u304F\\u4ED5\\u7D44\\u307F\\u3092Babel\\u30D7\\u30E9\\u30B0\\u30A4\\u30F3\\u3068\\u3057\\u3066\\u5B9F\\u88C5\\u3059\\u308B\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Babel\\u306E\\u30D1\\u30FC\\u30B5\\u306FBabel\\u72EC\\u81EA\\u3001\\u30C8\\u30E9\\u30D0\\u30FC\\u30B9\\u306FBabel\\u5074\\u3067\\u3084\\u3063\\u3066\\u304F\\u308C\\u308B\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    title: \"no-console: Babel\",\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"no-console: Babel\\\" file=\\\"examples/babel-plugin-no-console/index.js\\\"\",\n    \"title\": \"\\\"no-console:\",\n    \"Babel\\\"\": true,\n    \"file\": \"\\\"examples/babel-plugin-no-console/index.js\\\"\"\n  }), \"module.exports = function () {\\n    return {\\n        name: \\\"babel-plugin-no-console\\\",\\n        visitor: {\\n            CallExpression(path) {\\n                // path is wrapper of node + api\\n                const callee = path.node.callee;\\n                const isConsole =\\n                    callee.type === \\\"MemberExpression\\\" &&\\n                    callee.object.name === \\\"console\\\" &&\\n                    callee.property.name === \\\"log\\\";\\n                if (isConsole) {\\n                    return path.remove();\\n                }\\n            }\\n        }\\n    };\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"5:15 subtitle=\\\"CallExpressionが来たときに呼ばれる関数\\\"\",\n    \"5:15\": true,\n    \"subtitle\": \"\\\"CallExpressionが来たときに呼ばれる関数\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"7:11 subtitle=\\\"CallExpressionががconsole.logかを判定\\\"\",\n    \"7:11\": true,\n    \"subtitle\": \"\\\"CallExpressionががconsole.logかを判定\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"12:15 subtitle=\\\"console.logだったらpath.remove削除する\\\"\",\n    \"12:15\": true,\n    \"subtitle\": \"\\\"console.logだったらpath.remove削除する\\\"\"\n  }), \"\"))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [vsDark, github],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"実装\\\" file=\\\"examples/babel-plugin-no-console/index.js\\\"\",\n    \"title\": \"\\\"実装\\\"\",\n    \"file\": \"\\\"examples/babel-plugin-no-console/index.js\\\"\"\n  }), \"module.exports = function () {\\n    return {\\n        name: \\\"babel-plugin-no-console\\\",\\n        visitor: {\\n            CallExpression(path) {\\n                // path is wrapper of node + api\\n                const callee = path.node.callee;\\n                const isConsole =\\n                    callee.type === \\\"MemberExpression\\\" &&\\n                    callee.object.name === \\\"console\\\" &&\\n                    callee.property.name === \\\"log\\\";\\n                if (isConsole) {\\n                    return path.remove();\\n                }\\n            }\\n        }\\n    };\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"テスト\\\" file=\\\"examples/babel-plugin-no-console/index.test.js\\\"\",\n    \"title\": \"\\\"テスト\\\"\",\n    \"file\": \"\\\"examples/babel-plugin-no-console/index.test.js\\\"\"\n  }), \"const pluginTester = require(\\\"babel-plugin-tester\\\").default;\\nconst plugin = require(\\\"./index\\\");\\npluginTester({\\n    plugin: plugin,\\n    tests: [\\n        {\\n            code: `console.log(1 + 1)`,\\n            output: ``\\n        }\\n    ]\\n});\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"実装\\\" file=\\\"examples/babel-plugin-no-console/index.js\\\"\",\n    \"title\": \"\\\"実装\\\"\",\n    \"file\": \"\\\"examples/babel-plugin-no-console/index.js\\\"\"\n  }), \"module.exports = function () {\\n    return {\\n        name: \\\"babel-plugin-no-console\\\",\\n        visitor: {\\n            CallExpression(path) {\\n                // path is wrapper of node + api\\n                const callee = path.node.callee;\\n                const isConsole =\\n                    callee.type === \\\"MemberExpression\\\" &&\\n                    callee.object.name === \\\"console\\\" &&\\n                    callee.property.name === \\\"log\\\";\\n                if (isConsole) {\\n                    return path.remove();\\n                }\\n            }\\n        }\\n    };\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"5:10 title=\\\"テスト\\\" subtitle=\\\"入力に対する出力を書くテスト\\\" file=\\\"examples/babel-plugin-no-console/index.test.js\\\"\",\n    \"5:10\": true,\n    \"title\": \"\\\"テスト\\\"\",\n    \"subtitle\": \"\\\"入力に対する出力を書くテスト\\\"\",\n    \"file\": \"\\\"examples/babel-plugin-no-console/index.test.js\\\"\"\n  }), \"const pluginTester = require(\\\"babel-plugin-tester\\\").default;\\nconst plugin = require(\\\"./index\\\");\\npluginTester({\\n    plugin: plugin,\\n    tests: [\\n        {\\n            code: `console.log(1 + 1)`,\\n            output: ``\\n        }\\n    ]\\n});\\n\")))), mdx(\"hr\", null), mdx(\"h2\", null, \"Babel\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"AST\\u306E\\u5909\\u63DB\\u306F\\u7D50\\u69CB\\u6CE5\\u81ED\\u3044\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Babel\\u306F\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"path\"), \"\\u30AA\\u30D6\\u30B8\\u30A7\\u30AF\\u30C8\\u306B\\u4FBF\\u5229\\u30E1\\u30BD\\u30C3\\u30C9\\u3092\\u305F\\u304F\\u3055\\u3093\\u6301\\u3063\\u3066\\u3044\\u308B\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"path.remove\"), \"\\u3067\\u305D\\u306ENode\\u3092\\u524A\\u9664\\u3067\\u304D\\u308B\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u5148\\u307B\\u3069\\u306E\\u30B3\\u30FC\\u30C9\\u3082 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"matchesPattern\"), \" \\u3092\\u4F7F\\u3046\\u3068\\u3082\\u3063\\u3068\\u77ED\\u304F\\u66F8\\u3051\\u308B\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    title: \"no-console: \\u30EA\\u30D5\\u30A1\\u30AF\\u30BF\\u30EA\\u30F3\\u30B0\",\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"先ほどの実装\\\" file=\\\"examples/babel-plugin-no-console/index.js\\\"\",\n    \"subtitle\": \"\\\"先ほどの実装\\\"\",\n    \"file\": \"\\\"examples/babel-plugin-no-console/index.js\\\"\"\n  }), \"module.exports = function () {\\n    return {\\n        name: \\\"babel-plugin-no-console\\\",\\n        visitor: {\\n            CallExpression(path) {\\n                // path is wrapper of node + api\\n                const callee = path.node.callee;\\n                const isConsole =\\n                    callee.type === \\\"MemberExpression\\\" &&\\n                    callee.object.name === \\\"console\\\" &&\\n                    callee.property.name === \\\"log\\\";\\n                if (isConsole) {\\n                    return path.remove();\\n                }\\n            }\\n        }\\n    };\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"matchesPatternを使う\\\"\",\n    \"subtitle\": \"\\\"matchesPatternを使う\\\"\"\n  }), \"module.exports = function () {\\n    return {\\n        name: \\\"babel-plugin-no-console\\\",\\n        visitor: {\\n            CallExpression(path) {\\n                // path has pattern match\\n                const isConsole = path.get('callee')\\n                    .matchesPattern('console.log');\\n                if (isConsole) {\\n                    return path.remove();\\n                }\\n            }\\n        }\\n    };\\n};\\n\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"Transform: \\u7F6E\\u63DB\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u524A\\u9664\\u3060\\u3051\\u3067\\u306F\\u306A\\u304F\\u5225\\u306E\\u3082\\u306E\\u3078\\u306E\\u7F6E\\u63DB\\u3082\\u7C21\\u5358\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"path.remove\"), \"\\u3067\\u306F\\u306A\\u304F\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"path.replaceWith(node, arguments)\"), \"\\u3092\\u4F7F\\u3046\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"babel-plugin-replace-console-log\"), \"\\u3092\\u4F5C\\u3063\\u3066\\u307F\\u308B\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"console.log(?)\"), \" \\u3092 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"log(?)\"), \" \\u306B\\u7F6E\\u304D\\u63DB\\u3048\\u308B\")))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    title: \"replace-console: \\u7F6E\\u63DB\",\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"no-console\\\" file=\\\"examples/babel-plugin-no-console/index.js\\\"\",\n    \"subtitle\": \"\\\"no-console\\\"\",\n    \"file\": \"\\\"examples/babel-plugin-no-console/index.js\\\"\"\n  }), \"module.exports = function () {\\n    return {\\n        name: \\\"babel-plugin-no-console\\\",\\n        visitor: {\\n            CallExpression(path) {\\n                // path is wrapper of node + api\\n                const callee = path.node.callee;\\n                const isConsole =\\n                    callee.type === \\\"MemberExpression\\\" &&\\n                    callee.object.name === \\\"console\\\" &&\\n                    callee.property.name === \\\"log\\\";\\n                if (isConsole) {\\n                    return path.remove();\\n                }\\n            }\\n        }\\n    };\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"replace-console-with-log\\\" file=\\\"examples/babel-plugin-replace-console-log/index.js\\\"\",\n    \"subtitle\": \"\\\"replace-console-with-log\\\"\",\n    \"file\": \"\\\"examples/babel-plugin-replace-console-log/index.js\\\"\"\n  }), \"module.exports = babel => {\\n    const { types: t } = babel;\\n    return {\\n        name: \\\"babel-plugin-replace-console-log\\\",\\n        visitor: {\\n            CallExpression(path) {\\n                const callee = path.node.callee;\\n                const isConsole =\\n                    callee.type === \\\"MemberExpression\\\" &&\\n                    callee.object.name === \\\"console\\\" &&\\n                    callee.property.name === \\\"log\\\";\\n                if (isConsole) {\\n                    // replace `console.log` with `log`\\n                    const originalArguments = path.node.arguments;\\n                    path.replaceWith(t.CallExpression(t.Identifier(\\\"log\\\"), originalArguments));\\n                }\\n            }\\n        }\\n    };\\n};\\n\"))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [vsDark, github],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"実装\\\" file=\\\"examples/babel-plugin-replace-console-log/index.js\\\"\",\n    \"title\": \"\\\"実装\\\"\",\n    \"file\": \"\\\"examples/babel-plugin-replace-console-log/index.js\\\"\"\n  }), \"module.exports = babel => {\\n    const { types: t } = babel;\\n    return {\\n        name: \\\"babel-plugin-replace-console-log\\\",\\n        visitor: {\\n            CallExpression(path) {\\n                const callee = path.node.callee;\\n                const isConsole =\\n                    callee.type === \\\"MemberExpression\\\" &&\\n                    callee.object.name === \\\"console\\\" &&\\n                    callee.property.name === \\\"log\\\";\\n                if (isConsole) {\\n                    // replace `console.log` with `log`\\n                    const originalArguments = path.node.arguments;\\n                    path.replaceWith(t.CallExpression(t.Identifier(\\\"log\\\"), originalArguments));\\n                }\\n            }\\n        }\\n    };\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"テスト\\\" file=\\\"examples/babel-plugin-replace-console-log/index.test.js\\\"\",\n    \"title\": \"\\\"テスト\\\"\",\n    \"file\": \"\\\"examples/babel-plugin-replace-console-log/index.test.js\\\"\"\n  }), \"const pluginTester = require(\\\"babel-plugin-tester\\\").default;\\nconst plugin = require(\\\"./index\\\");\\npluginTester({\\n    plugin: plugin,\\n    tests: [\\n        {\\n            code: `console.log(1 + 1);`,\\n            output: `log(1 + 1);`\\n        }\\n    ]\\n});\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"12:15 title=\\\"実装\\\" file=\\\"examples/babel-plugin-replace-console-log/index.js\\\"\",\n    \"12:15\": true,\n    \"title\": \"\\\"実装\\\"\",\n    \"file\": \"\\\"examples/babel-plugin-replace-console-log/index.js\\\"\"\n  }), \"module.exports = babel => {\\n    const { types: t } = babel;\\n    return {\\n        name: \\\"babel-plugin-replace-console-log\\\",\\n        visitor: {\\n            CallExpression(path) {\\n                const callee = path.node.callee;\\n                const isConsole =\\n                    callee.type === \\\"MemberExpression\\\" &&\\n                    callee.object.name === \\\"console\\\" &&\\n                    callee.property.name === \\\"log\\\";\\n                if (isConsole) {\\n                    // replace `console.log` with `log`\\n                    const originalArguments = path.node.arguments;\\n                    path.replaceWith(t.CallExpression(t.Identifier(\\\"log\\\"), originalArguments));\\n                }\\n            }\\n        }\\n    };\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"5:10 title=\\\"テスト\\\" subtitle=\\\"置換されてる\\\" file=\\\"examples/babel-plugin-replace-console-log/index.test.js\\\"\",\n    \"5:10\": true,\n    \"title\": \"\\\"テスト\\\"\",\n    \"subtitle\": \"\\\"置換されてる\\\"\",\n    \"file\": \"\\\"examples/babel-plugin-replace-console-log/index.test.js\\\"\"\n  }), \"const pluginTester = require(\\\"babel-plugin-tester\\\").default;\\nconst plugin = require(\\\"./index\\\");\\npluginTester({\\n    plugin: plugin,\\n    tests: [\\n        {\\n            code: `console.log(1 + 1);`,\\n            output: `log(1 + 1);`\\n        }\\n    ]\\n});\\n\")))), mdx(\"hr\", null), mdx(\"h1\", null, \"Babel\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u30C9\\u30AD\\u30E5\\u30E1\\u30F3\\u30C8\\u306F\\u3044\\u307E\\u3044\\u3061\\u3060\\u3051\\u3069\\u3001AST\\u306E\\u4FBF\\u5229\\u30E1\\u30BD\\u30C3\\u30C9\\u304C\\u3042\\u308B\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"replace, remove, \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://babeljs.io/docs/en/babel-template\"\n  }), \"template\"), \", evaluate(\\u9759\\u7684\\u306B\\u5B9F\\u884C\\u7D50\\u679C\\u3092\\u8A08\\u7B97)\")))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    title: \"no-console: \\u30EA\\u30D5\\u30A1\\u30AF\\u30BF\\u30EA\\u30F3\\u30B0\",\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"今までの実装\\\" file=\\\"examples/babel-plugin-replace-console-log/index.js\\\"\",\n    \"title\": \"\\\"今までの実装\\\"\",\n    \"file\": \"\\\"examples/babel-plugin-replace-console-log/index.js\\\"\"\n  }), \"module.exports = babel => {\\n    const { types: t } = babel;\\n    return {\\n        name: \\\"babel-plugin-replace-console-log\\\",\\n        visitor: {\\n            CallExpression(path) {\\n                const callee = path.node.callee;\\n                const isConsole =\\n                    callee.type === \\\"MemberExpression\\\" &&\\n                    callee.object.name === \\\"console\\\" &&\\n                    callee.property.name === \\\"log\\\";\\n                if (isConsole) {\\n                    // replace `console.log` with `log`\\n                    const originalArguments = path.node.arguments;\\n                    path.replaceWith(t.CallExpression(t.Identifier(\\\"log\\\"), originalArguments));\\n                }\\n            }\\n        }\\n    };\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"babel-templateを使った実装\\\" file=\\\"examples/babel-plugin-replace-console-log-template/index.js\\\"\",\n    \"subtitle\": \"\\\"babel-templateを使った実装\\\"\",\n    \"file\": \"\\\"examples/babel-plugin-replace-console-log-template/index.js\\\"\"\n  }), \"module.exports = babel => {\\n    const { template } = babel;\\n    return {\\n        name: \\\"babel-plugin-replace-console-log\\\",\\n        visitor: {\\n            CallExpression(path) {\\n                const isConsole = path.get('callee')\\n                    .matchesPattern('console.log');\\n                if (isConsole) {\\n                    const build = template(`log(ARGUMENT)`);\\n                    const ast = build({\\n                        ARGUMENT: path.node.arguments,\\n                    });\\n                    path.replaceWith(ast);\\n                }\\n            }\\n        }\\n    };\\n};\\n\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"Transform: jscodeshift\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Babel\\u4EE5\\u5916\\u306B\\u3082\\u30B3\\u30FC\\u30C9\\u3092\\u5909\\u63DB\\u3059\\u308B\\u30C4\\u30FC\\u30EB\\u306F\\u3042\\u308B\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/facebook/jscodeshift\"\n  }), \"jscodeshift\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"React\\u306E\", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/facebook/codemod\"\n  }), \"codemod\"), \"\\u306A\\u3069\\u30DE\\u30A4\\u30B0\\u30EC\\u30FC\\u30B7\\u30E7\\u30F3\\u30C4\\u30FC\\u30EB\\u3067\\u4F7F\\u308F\\u308C\\u308B\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Babel\\u306F\\u30D3\\u30EB\\u30C9\\u5411\\u3051\\u3001jscodeshift\\u306Fgrep+sed\\u306A\\u3069\\u3088\\u3046\\u306A\\u5927\\u91CF\\u306E\\u30D5\\u30A1\\u30A4\\u30EB\\u5909\\u66F4\\u5411\\u3051\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/facebook/jscodeshift\"\n  }), \"jscodeshift\"), \"\\u3082\\u5185\\u90E8\\u7684\\u306BBabel\\u306E\\u30D1\\u30FC\\u30B5\\u3092\\u4F7F\\u3046\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"JavaScript\\u3084TypeScript\\u3092\\u51E6\\u7406\\u3067\\u304D\\u308B\\u305F\\u3081\")))), mdx(\"hr\", null), mdx(\"h1\", null, \"Transform: jscodeshift\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/facebook/jscodeshift\"\n  }), \"jscodeshift\"), \"\\u306FVisitor\\u30D1\\u30BF\\u30FC\\u30F3\\u3067\\u306F\\u306A\\u3044\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"jQuery\\u3084DOM API\\u3088\\u3046\\u306A\\u30B3\\u30EC\\u30AF\\u30B7\\u30E7\\u30F3API\\u3067AST\\u3092\\u64CD\\u4F5C\\u3057\\u3066\\u3044\\u304F\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ESLint, Babel: \\u30C8\\u30E9\\u30D0\\u30FC\\u30B9\\u306E\\u5F85\\u3061\\u53D7\\u3051\\u3092\\u51E6\\u7406\\u3092\\u66F8\\u304F(\\u30C8\\u30C3\\u30D7\\u30C0\\u30A6\\u30F3)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"jscodeshift: \\u5909\\u63DB\\u3057\\u305F\\u3044Node\\u3092\\u63A2\\u3057\\u3066\\u51E6\\u7406\\u3092\\u66F8\\u304F(\\u30DC\\u30C8\\u30E0\\u30A2\\u30C3\\u30D7)\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    title: \"replace-console: jscodeshift\",\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"replace-console-with-log\\\" file=\\\"examples/jscodeshift-replace-console-log/index.js\\\"\",\n    \"title\": \"\\\"replace-console-with-log\\\"\",\n    \"file\": \"\\\"examples/jscodeshift-replace-console-log/index.js\\\"\"\n  }), \"module.exports = function(fileInfo, api) {\\n    return api\\n        .jscodeshift(fileInfo.source)\\n        .find(\\\"CallExpression\\\")\\n        .filter(path => {\\n            // babel's path\\n            const callee = path.get(\\\"callee\\\");\\n            return (\\n                callee.node.type === \\\"MemberExpression\\\" &&\\n                callee.node.object.name === \\\"console\\\" &&\\n                callee.property.name === \\\"log\\\"\\n            );\\n        })\\n        .replaceWith(path => {\\n            const t = api.jscodeshift;\\n            const originalArguments = path.node.arguments;\\n            return t.callExpression(t.identifier(\\\"log\\\"), originalArguments);\\n        })\\n        .toSource();\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"2:3 subtitle=\\\"ソースを読む\\\"\",\n    \"2:3\": true,\n    \"subtitle\": \"\\\"ソースを読む\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"4\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"4 subtitle=\\\"CallExpressionを探す\\\"\",\n    \"subtitle\": \"\\\"CallExpressionを探す\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"5:13 subtitle=\\\"CallExpressionがconsole.logだけに絞る\\\"\",\n    \"5:13\": true,\n    \"subtitle\": \"\\\"CallExpressionがconsole.logだけに絞る\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"14:18 subtitle=\\\"console.logをlogに置換する\\\"\",\n    \"14:18\": true,\n    \"subtitle\": \"\\\"console.logをlogに置換する\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"19\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"19 subtitle=\\\"変換結果をソースに戻す\\\"\",\n    \"subtitle\": \"\\\"変換結果をソースに戻す\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"subtitle=\\\"console.log -> log\\\"\",\n    \"subtitle\": \"\\\"console.log\",\n    \"->\": true,\n    \"log\\\"\": true\n  }), \"\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"matchPath":"/*","isCreatedByStatefulCreatePages":false,"id":"0ff6303b-3b13-56ad-a9c5-d222cb2aa48b","slug":"","title":"Dive into AST"}}}